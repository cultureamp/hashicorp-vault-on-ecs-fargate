Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: General Parameters
        Parameters:
          - Application
          - Environment
          - Owner
      - Label:
          default: Network Parameters
        Parameters:
          - VaultDNS
          - VPC
          - PublicSubnets
          - PrivateSubnets
      - Label:
          default: DynamoDB Parameters
        Parameters:
          - DynamoDBTableName
          - DynamoDBReadCapacity
          - DynamoDBWriteCapacity
      - Label:
          default: Miscellaneous Parameters
        Parameters:
          - CertificateARN
          - VaultLogRetention
      - Label:
          default: ECS Parameters
        Parameters:
          - ClusterName
          - VaultContainer
          - CertHelperContainer
          - NumberOfVaultTasks
          - TaskMemory
          - TaskCPU
Parameters:
  Application:
    Type: String
    Description: Lowercase application name.
    Default: vault
  Environment:
    Type: String
    Description: The environment
    AllowedValues:
      - dev
      - tst
      - stg
      - prd
  Owner:
    Type: String
    Description: Owner's email address used for tagging resources.
  VaultLogRetention:
    Type: String
    Description: Log retention period in days for ECS logs.
    Default: "1"
  ClusterName:
    Type: String
    Description: Name for the ECS cluster.
    Default: vault
  VPC:
    Type: "AWS::EC2::VPC::Id"
    Description: The application VPC.
  PrivateSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Private subnets the ECS tasks will run in.
  PublicSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: >-
      Public subnets the ALB will reside. Must include subnets in the same AZs
      of the selected private subnets.
  CertHelperContainer:
    Type: String
    Description: The container URI to pull for the cert helper container.
  VaultContainer:
    Type: String
    Description: The container URI to pull for the vault container.
    Default: "vault:1.7.3"
  NumberOfVaultTasks:
    Type: String
    Description: How many vault nodes do you want to run?
    Default: "0"
  TaskMemory:
    Type: String
    Description: Allocated memory for task.
    Default: "512"
  TaskCPU:
    Type: String
    Description: Allocated CPU for task.
    Default: "256"
  DynamoDBTableName:
    Type: String
    Description: Name of the DynamoDB table Vault will create and use.
    Default: vault-data
  DynamoDBReadCapacity:
    Type: String
    Description: "Specifies the maximum number of reads performed per second on the table,"
    Default: "5"
  DynamoDBWriteCapacity:
    Type: String
    Description: "Specifies the maximum number of writes performed per second on the table,"
    Default: "5"
  CertificateARN:
    Type: String
    Description: ACM ARN for the Load Balancer listener.
  VaultDNS:
    Type: String
    Description: The fully qualified domain name the Vault service will resolve to.
Resources:
  DynamodbTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName:
        Ref: DynamoDBTableName
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: Path
          AttributeType: S
        - AttributeName: Key
          AttributeType: S
      KeySchema:
        - AttributeName: Path
          KeyType: HASH
        - AttributeName: Key
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits:
          Ref: DynamoDBReadCapacity
        WriteCapacityUnits:
          Ref: DynamoDBWriteCapacity
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
  VaultKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      EnableKeyRotation: true
      Enabled: true
      Description:
        "Fn::Join":
          - " "
          - - "KMS CMK for Vault running in the ECS cluster "
            - Ref: ClusterName
      Tags:
        - Key: Owner
          Value:
            Ref: Owner
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                "Fn::Join":
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: "AWS::AccountId"
                    - ":root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service:
                "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
  KeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName:
        "Fn::Join":
          - /
          - - alias
            - Ref: Application
      TargetKeyId:
        Ref: VaultKMSKey
  ECSExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      RoleName:
        "Fn::Sub": "ECS-Execution-Role-${ClusterName}"
  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName:
        "Fn::Sub": "${ClusterName}-ecs-${Application}-task-role"
      Policies:
        - PolicyName: VaultRequiredPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeLimits"
                  - "dynamodb:DescribeTimeToLive"
                  - "dynamodb:ListTagsOfResource"
                  - "dynamodb:DescribeReservedCapacityOfferings"
                  - "dynamodb:DescribeReservedCapacity"
                  - "dynamodb:ListTables"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:CreateTable"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                Resource:
                  "Fn::Sub": >-
                    arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:DescribeKey"
                  - "kms:ListAliases"
                Resource:
                  "Fn::GetAtt":
                    - VaultKMSKey
                    - Arn
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription:
        "Fn::Sub": "${Application} ${Environment} ALB security group"
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name:
        "Fn::Join":
          - "-"
          - - Ref: Application
            - Ref: Environment
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ALBSecurityGroup
      Subnets:
        Ref: PublicSubnets
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ui/vault/auth?with=token
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 10
      HealthyThresholdCount: 2
      Name:
        "Fn::Join":
          - "-"
          - - Ref: Application
            - Ref: Environment
      Port: "8200"
      Protocol: HTTPS
      TargetType: ip
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
  ALBRedirectListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: "443"
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: CertificateARN
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName:
        Ref: ClusterName
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription:
        "Fn::Sub": "${Application} ${Environment} ECS service security group"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: "8200"
          FromPort: "8200"
          SourceSecurityGroupId:
            Ref: ALBSecurityGroup
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
  SelfReference8200:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: ECSSecurityGroup
      IpProtocol: tcp
      FromPort: "8200"
      ToPort: "8200"
      SourceSecurityGroupId:
        Ref: ECSSecurityGroup
  AllowServiceOnALB:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: ALBSecurityGroup
      IpProtocol: tcp
      FromPort: "443"
      ToPort: "443"
      SourceSecurityGroupId:
        Ref: ECSSecurityGroup
  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName:
        "Fn::Sub": "ecs/${Application}-${Environment}/vault"
      KmsKeyId:
        "Fn::GetAtt":
          - VaultKMSKey
          - Arn
      RetentionInDays:
        Ref: VaultLogRetention
  ECSTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Volumes:
        - Name: certhelper
      ContainerDefinitions:
        - Name: vault
          Image:
            Ref: VaultContainer
          Essential: true
          MountPoints:
            - ContainerPath: /ssl
              SourceVolume: certhelper
          DependsOn:
            - ContainerName: certhelper
              Condition: COMPLETE
          PortMappings:
            - ContainerPort: "8200"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: "AWS::Region"
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: ecs
          Command:
            - server
          Environment:
            - Name: VAULT_API_ADDR
              Value:
                "Fn::Sub": "https://${VaultDNS}"
            - Name: VAULT_LOCAL_CONFIG
              Value:
                "Fn::Sub": >-
                  ui = true storage "dynamodb" { ha_enabled = "true" region =
                  "us-east-1" table = "${DynamoDBTableName}" } seal "awskms" {
                  region = "${AWS::Region}" kms_key_id = "${VaultKMSKey}"}
                  listener "tcp" { address = "[::]:8200" tls_cert_file =
                  "/ssl/server.crt" tls_key_file = "/ssl/server.key" }
        - Name: certhelper
          Image:
            Ref: CertHelperContainer
          Essential: false
          MountPoints:
            - ContainerPath: /ssl
              SourceVolume: certhelper
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Ref: "AWS::Region"
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-stream-prefix: ecs
      Cpu:
        Ref: TaskCPU
      ExecutionRoleArn:
        Ref: ECSExecutionRole
      Family:
        "Fn::Sub": "${Application}-${Environment}"
      Memory:
        Ref: TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
        - Key: Cluster
          Value:
            Ref: ClusterName
      TaskRoleArn:
        "Fn::GetAtt":
          - ECSTaskRole
          - Arn
  ECSService:
    DependsOn:
      - ALBListener
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: vault
      PlatformVersion: 1.4.0
      Cluster:
        Ref: ClusterName
      TaskDefinition:
        Ref: ECSTask
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount:
        Ref: NumberOfVaultTasks
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            Ref: PrivateSubnets
          SecurityGroups:
            - Ref: ECSSecurityGroup
      LoadBalancers:
        - ContainerName: vault
          ContainerPort: "8200"
          TargetGroupArn:
            Ref: TargetGroup
      Tags:
        - Key: Application
          Value:
            Ref: Application
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Owner
          Value:
            Ref: Owner
